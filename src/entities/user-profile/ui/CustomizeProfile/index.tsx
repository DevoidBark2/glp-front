import { observer } from "mobx-react";
import { useState } from "react";
import { Button, Divider, Tabs, Tooltip } from "antd";
import { useMobxStores } from "@/shared/store/RootStore";

const { TabPane } = Tabs;

const categories = {
    frames: [
        { id: "gold", name: "–ó–æ–ª–æ—Ç–æ", className: "border-yellow-400", price: 500 },
        { id: "silver", name: "–°–µ—Ä–µ–±—Ä–æ", className: "border-gray-400", price: 300 },
        { id: "none", name: "–ë–µ–∑ —Ä–∞–º–∫–∏", className: "", price: 0 },
    ],
    backgrounds: [
        { id: "blue", name: "–°–∏–Ω–∏–π", className: "bg-blue-500", price: 400 },
        { id: "red", name: "–ö—Ä–∞—Å–Ω—ã–π", className: "bg-red-500", price: 400 },
        { id: "green", name: "–ó–µ–ª–µ–Ω—ã–π", className: "bg-green-500", price: 400 },
        { id: "purple", name: "–ü—É—Ä–ø—É—Ä–Ω—ã–π", className: "bg-purple-500", price: 400 },
        { id: "none", name: "–ë–µ–∑ —Ñ–æ–Ω–∞", className: "", price: 0 },
    ],
    icons: [
        { id: "star", name: "‚≠ê –ó–≤–µ–∑–¥–∞", price: 200 },
        { id: "heart", name: "‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ", price: 250 },
        { id: "rocket", name: "üöÄ –†–∞–∫–µ—Ç–∞", price: 350 },
        { id: "crown", name: "üëë –ö–æ—Ä–æ–Ω–∞", price: 500 },
    ],
    effects: [
        { id: "glow", name: "‚ú® –°–≤–µ—á–µ–Ω–∏–µ", price: 300 },
        { id: "shadow", name: "üåë –¢–µ–Ω—å", price: 200 },
        { id: "sparkle", name: "üåü –ò—Å–∫—Ä—ã", price: 150 },
        { id: "rainbow", name: "üåà –†–∞–¥—É–≥–∞", price: 450 },
    ],
    borders: [
        { id: "dashed", name: "–ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è", className: "border-dashed", price: 100 },
        { id: "solid", name: "–°–ø–ª–æ—à–Ω–∞—è –ª–∏–Ω–∏—è", className: "border-solid", price: 150 },
        { id: "double", name: "–î–≤–æ–π–Ω–∞—è –ª–∏–Ω–∏—è", className: "border-double", price: 200 },
    ],
    fontStyles: [
        { id: "handwriting", name: "–†—É–∫–æ–ø–∏—Å–Ω—ã–π", className: "font-cursive", price: 250 },
        { id: "monospace", name: "–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π", className: "font-mono", price: 200 },
        { id: "serif", name: "–°–µ—Ä–∏—Ñ", className: "font-serif", price: 150 },
    ],
};

export const CustomizeProfile = observer(() => {
    const { userProfileStore } = useMobxStores()
    const [previewModal, setPreviewModal] = useState(false);
    const [selectedItems, setSelectedItems] = useState({
        frames: "none",
        backgrounds: "none",
        icons: null,
        effects: null,
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    const handleSelect = (category, itemId) => {
        setSelectedItems(prev => {
            const newSelectedItems = { ...prev };
            newSelectedItems[category] = itemId;
            return newSelectedItems;
        });
    };

    const totalCost = Object.entries(selectedItems).reduce((acc, [key, value]) => {
        const item = categories[key]?.find((el) => el.id === value);
        if (item) {
            return acc + item.price;
        }
        return acc; // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    }, 0);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const removeItem = (category) => {
        setSelectedItems(prev => {
            const newSelectedItems = { ...prev };
            newSelectedItems[category] = "none"; // —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ "none"
            return newSelectedItems;
        });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const buyAll = () => {
        alert('–í—ã –∫—É–ø–∏–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã!');
        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–∫—É–ø–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    };

    return (
        <div className="container mx-auto p-6">
            <div className="flex justify-between items-center">
                <Button onClick={() => setPreviewModal(true)}>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</Button>
                <Tooltip title="–í–∞—à –±–∞–ª–∞–Ω—Å">
                    <div className="flex items-center gap-2 text-lg font-semibold text-yellow-600">
                        üí∞ {userProfileStore.userProfile?.coins}
                    </div>
                </Tooltip>
            </div>
            <Divider />
            <div className="p-8">
                <h1 className="text-3xl font-extrabold mb-8 text-center text-blue-600">üé® –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è</h1>
                <h3 className="text-xl font-semibold mb-6 text-gray-700">–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:</h3>

                {/* –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
                <Tabs defaultActiveKey="1" className="mb-8">
                    {Object.entries(categories).map(([key, items]) => (
                        <TabPane tab={key} key={key}>
                            <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
                                {items.map((item) => (
                                    <div
                                        key={item.id}
                                        className={`relative group cursor-pointer rounded-lg overflow-hidden shadow-lg transition-all duration-300 transform hover:scale-105 ${selectedItems[key] === item.id ? "border-2 border-blue-500 shadow-xl" : "border border-gray-200"}`}
                                        onClick={() => handleSelect(key, item.id)}
                                    >
                                        <div className="absolute inset-0 bg-black opacity-25 group-hover:opacity-0 transition-opacity"></div>
                                        <div className="relative z-10 p-4">
                                            <h5 className="text-center font-medium text-gray-800">{item.name}</h5>
                                            <p className="text-center text-green-500 font-semibold">{item.price} üí∞</p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </TabPane>
                    ))}
                </Tabs>

                {/* –ë–ª–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */}
                <div className="mt-8">
                    <h3 className="text-xl font-semibold mb-4">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:</h3>
                    <div className="flex flex-wrap gap-4">
                        {Object.entries(selectedItems).map(([category, itemId]) => {
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω (–Ω–µ "none")
                            if (itemId && itemId !== "none") {
                                const item = categories[category]?.find(i => i.id === itemId);
                                // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
                                if (item) {
                                    return (
                                        <div key={itemId} className="flex items-center bg-gray-100 p-2 rounded-full">
                                            <span>{item.name} ({item.price} üí∞)</span>
                                            <Button
                                                type="link"
                                                className="ml-2 text-red-500"
                                                onClick={() => removeItem(category)}
                                            >
                                                –£–¥–∞–ª–∏—Ç—å
                                            </Button>
                                        </div>
                                    );
                                }
                            }
                            return null; // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω
                        })}
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
                    {Object.values(selectedItems).some(itemId => itemId !== "none") && (
                        <Button
                            type="primary"
                            className="mt-6"
                            onClick={buyAll}
                        >
                            –ö—É–ø–∏—Ç—å –≤—Å–µ
                        </Button>
                    )}
                </div>
            </div>

            {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–Ω–æ–ø–∫–∞ */}
            <div className="mt-6 text-center">
                <h2 className="text-xl font-bold">
                    üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <span className="text-green-500">{totalCost} –º–æ–Ω–µ—Ç</span>
                </h2>
                <Button type="primary" className="mt-4 px-6 py-2 bg-blue-500 hover:bg-blue-700">
                    –ö—É–ø–∏—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å
                </Button>
            </div>
        </div>
    );
});
